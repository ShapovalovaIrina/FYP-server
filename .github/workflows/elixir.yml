name: Elixir CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_and_test:
    name: Build and test
    runs-on: ubuntu-latest

    container:
      image: elixir:1.11.2-alpine

    services:
      pghost:
        image: postgres:latest
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: fyp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

      - name: Run tests
        run: mix test

      - name: Upload swagger documentation
        uses: actions/upload-artifact@v2
        with:
          name: OpenAPI
          path: openapi.json

  release:
    name: Build release
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master'}}
    runs-on: ubuntu-latest
    needs: [ build_and_test ]

    container:
      image: elixir:1.11.2-alpine

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

      - name: Release
        run: |
          export SECRET_KEY_BASE=$(mix phx.gen.secret)
          export MIX_ENV=prod
          mix release

      - name: Upload release
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: _build/prod

  docker_image:
    name: Publish to Docker Hub
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master'}}
    runs-on: ubuntu-latest
    needs: [ build_and_test, release ]

    steps:
      - uses: actions/checkout@v2

      - name: Download release from previous job
        uses: actions/download-artifact@v2
        with:
          name: build
          path: _build/prod

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Container image
        run: docker build -f docker/Dockerfile -t ${{ secrets.DOCKER_REPO }}:latest .
      - name: Publish Docker image
        run: docker push ${{ secrets.DOCKER_REPO }}

